{"version":3,"sources":["components/sections/Video.tsx","components/sections/Description.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Box","styled","div","VidBox","Title","Vid","iframe","src","Group","Overview","Name","Picture","img","Description","ImageBox","ImageWrap","HelloButton","a","href","role","Constraint","Footer","Video","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ujCAGA,IAAMA,EAA0BC,IAAOC,IAAV,KAiBvBC,EAA6BF,IAAOC,IAAV,KAM1BE,EAA4BH,IAAOC,IAAV,KAMzBG,EAA0BJ,IAAOK,OAAV,KAUd,aACd,OACC,6BACC,kBAACN,EAAD,KACC,kBAACI,EAAD,wBACA,kBAACD,EAAD,KACE,IACD,kBAACE,EAAD,CAAKE,IAAI,kD,q3DC9Cd,IAAMC,EAA4BP,IAAOC,IAAV,KAMzBO,EAA+BR,IAAOC,IAAV,KAI5BF,EAA0BC,IAAOC,IAAV,KAiBvBQ,EAA2BT,IAAOC,IAAV,KAQxBS,EAA8BV,IAAOW,IAAV,KAQ3BC,EAAkCZ,IAAOC,IAAV,KAM/BY,EAA+Bb,IAAOC,IAAV,KAK5Ba,EAAgCd,IAAOC,IAAV,KAI7Bc,EAAkCf,IAAOgB,EAAV,KAoBtB,aACd,OACC,kBAACR,EAAD,KACC,kBAACD,EAAD,KACC,kBAAC,EAAD,KACC,kBAACM,EAAD,KACC,kBAACC,EAAD,KACC,kBAACJ,EAAD,CAASJ,IAAI,sDAIf,kBAACG,EAAD,uBACA,kBAACG,EAAD,oIAIA,kBAACC,EAAD,KACC,kBAACE,EAAD,CAAaE,KAAK,mCAAlB,cACY,0BAAMC,KAAK,OAAX,sB,igBC7FlB,IAAMX,EAA4BP,IAAOC,IAAV,KAMzBkB,EAAiCnB,IAAOC,IAAV,KAK9BmB,EAA6BpB,IAAOC,IAAV,KASjB,aACd,OACC,kBAAC,EAAD,KACC,kBAACkB,EAAD,KACC,kBAAC,EAAD,MACA,kBAACE,EAAD,MACA,kBAACD,EAAD,mCCpBgBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9cd22de5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled, { AnyStyledComponent } from \"styled-components\";\r\n\r\nconst Box: AnyStyledComponent = styled.div`\r\n\theight: auto;\r\n\twidth: auto;\r\n\tmargin: 10px;\r\n\tpadding: 7%;\r\n\tbackground-color: white;\r\n\r\n\tborder-radius: 12px;\r\n\tfont-size: 20px;\r\n\r\n\tbox-shadow: 0px 4px 30px rgba(0, 0, 0, 0.08);\r\n\r\n\t@media (max-width: 900px) {\r\n\t\tmargin: 30px;\r\n\t}\r\n`;\r\n\r\nconst VidBox: AnyStyledComponent = styled.div`\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\toverflow: hidden;\r\n\tpadding-top: 56.25%; /* 16:9 Aspect Ratio */\r\n`;\r\nconst Title: AnyStyledComponent = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\tfont-size: 20px;\r\n\tpadding-bottom: 15px;\r\n`;\r\nconst Vid: AnyStyledComponent = styled.iframe`\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tbottom: 0;\r\n\tright: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tborder: none;\r\n`;\r\nexport default () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Box>\r\n\t\t\t\t<Title>Check this out!</Title>\r\n\t\t\t\t<VidBox>\r\n\t\t\t\t\t{\" \"}\r\n\t\t\t\t\t<Vid src=\"https://www.youtube.com/embed/tgbNymZ7vqY\" />\r\n\t\t\t\t</VidBox>\r\n\t\t\t</Box>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport styled, { AnyStyledComponent } from \"styled-components\";\r\n\r\nconst Group: AnyStyledComponent = styled.div`\r\n\tdisplay: flex;\r\n\tpadding-top: 10%;\r\n\twidth: 100%;\r\n\tjustify-content: center;\r\n`;\r\nconst Overview: AnyStyledComponent = styled.div`\r\n\tdisplay: flex;\r\n`;\r\n\r\nconst Box: AnyStyledComponent = styled.div`\r\n\theight: auto;\r\n\twidth: auto;\r\n\tmargin: 10px;\r\n\tpadding: 10%;\r\n\tbackground-color: white;\r\n\tmargin-top: 20px;\r\n\tmargin-bottom: 20px;\r\n\tborder-radius: 12px;\r\n\r\n\tbox-shadow: 0px 4px 30px rgba(0, 0, 0, 0.08);\r\n\r\n\tpadding-bottom: 5px;\r\n\t@media (max-width: 900px) {\r\n\t\tmargin: 30px;\r\n\t}\r\n`;\r\nconst Name: AnyStyledComponent = styled.div`\r\n\tdisplay: flex;\r\n\tpadding-top: 2%;\r\n\tjustify-content: center;\r\n\tfont-weight: bold;\r\n\tpadding-bottom: 5%;\r\n\tfont-size: 20px;\r\n`;\r\nconst Picture: AnyStyledComponent = styled.img`\r\n\tdisplay: block;\r\n\twidth: 100%;\r\n\tmax-width: 150px; /*actual image width*/\r\n\theight: auto; /* maintain aspect ratio*/\r\n\tmargin: auto; /*optional centering of image*/\r\n\tborder-radius: 50%;\r\n`;\r\nconst Description: AnyStyledComponent = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\tfont-size: 20px;\r\n`;\r\n\r\nconst ImageBox: AnyStyledComponent = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n`;\r\nconst ImageWrap: AnyStyledComponent = styled.div`\r\n\twidth: 55%; /*or whatever you choose*/\r\n\tmargin: auto;\r\n`;\r\nconst HelloButton: AnyStyledComponent = styled.a`\r\n\toutline: none;\r\n\tborder: none;\r\n\tpadding-top: 2px;\r\n\tmargin-top: 10px;\r\n\tpadding: 3px;\r\n\tmargin-bottom: 4%;\r\n\tpadding-left: 5px;\r\n\tcolor: white;\r\n\tborder-radius: 10px;\r\n\tbackground: #4a82f6;\r\n\tcursor: pointer;\r\n\ttext-decoration: none;\r\n\tfont-size: 20px;\r\n\ttransition: all 0.2s ease-in-out;\r\n\r\n\t&:hover {\r\n\t\tbackground: #6898fc;\r\n\t}\r\n`;\r\nexport default () => {\r\n\treturn (\r\n\t\t<Overview>\r\n\t\t\t<Group>\r\n\t\t\t\t<Box>\r\n\t\t\t\t\t<ImageBox>\r\n\t\t\t\t\t\t<ImageWrap>\r\n\t\t\t\t\t\t\t<Picture src=\"https://www.w3schools.com/howto/img_avatar2.png\" />\r\n\t\t\t\t\t\t</ImageWrap>\r\n\t\t\t\t\t</ImageBox>\r\n\r\n\t\t\t\t\t<Name>Haleigh Wagner</Name>\r\n\t\t\t\t\t<Description>\r\n\t\t\t\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n\t\t\t\t\t\teiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n\t\t\t\t\t</Description>\r\n\t\t\t\t\t<ImageBox>\r\n\t\t\t\t\t\t<HelloButton href=\"mailto:haleigh.wagner@gmail.com\">\r\n\t\t\t\t\t\t\tSay hello! <span role=\"img\">ðŸ‘‹</span>\r\n\t\t\t\t\t\t</HelloButton>\r\n\t\t\t\t\t</ImageBox>\r\n\t\t\t\t</Box>\r\n\t\t\t</Group>\r\n\t\t</Overview>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport styled, { AnyStyledComponent } from \"styled-components\";\r\nimport Video from \"./components/sections/Video\";\r\nimport Description from \"./components/sections/Description\";\r\n\r\nconst Group: AnyStyledComponent = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tfont-family: \"Poppins\", sans-serif;\r\n\twidth: 100%;\r\n`;\r\nconst Constraint: AnyStyledComponent = styled.div`\r\n\tmax-width: 40em;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n`;\r\nconst Footer: AnyStyledComponent = styled.div`\r\n\tfont-size: 20px;\r\n\tfont-weight: bold;\r\n\tpadding-top: 10px;\r\n\tpadding-bottom: 10px;\r\n\tjustify-content: center;\r\n\tdisplay: flex;\r\n`;\r\n\r\nexport default () => {\r\n\treturn (\r\n\t\t<Group>\r\n\t\t\t<Constraint>\r\n\t\t\t\t<Description />\r\n\t\t\t\t<Video />\r\n\t\t\t\t<Footer>Â©2020 Haleigh Wagner</Footer>\r\n\t\t\t</Constraint>\r\n\t\t</Group>\r\n\t);\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}